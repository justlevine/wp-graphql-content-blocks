on:
  # Trigger analysis when pushing in main or pull requests, and when creating
  # a pull request.
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

name: Main Workflow
jobs:
  sonarqube:
    runs-on: ubuntu-22.04
    steps:
      - name: Check if PR author is an org member
        id: check-member
        uses: actions/github-script@v6
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN,
            });

            const org = 'wpengine'; // replace with your GitHub org
            const username = context.payload.pull_request.user.login;

            try {
              const { data: membership } = await octokit.orgs.getMembershipForUser({
                org,
                username,
              });
              return { isMember: membership.state === 'active' };
            } catch (error) {
              return { isMember: false }; // If not a member or error occurs, treat as not a member
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip if not an org member
        if: steps.check-member.outputs.isMember != 'true'
        run: echo "Skipping workflow because PR author is not an org member" && exit 0
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

      - name: "Display Quality gate result"
        run: echo "Front Quality Gate status ${{ toJSON(steps.sonarqube-result-front) }}"